"""
Django settings for VeggieVision project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import torch

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 安全配置（开发环境）
SECRET_KEY = "django-insecure-h550u^egkc!&3my0b&pac_soq#^rm7h#^gum&82m(1ytwmuw8j"
DEBUG = True
ALLOWED_HOSTS = ['*']  # 开发环境允许所有主机

# 应用定义
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "users",          # 用户模块
    "grading",        # 分级模块
    "rest_framework", # DRF框架
    'rest_framework.authtoken',
    "corsheaders",    # 跨域支持
]

# 中间件
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # 跨域中间件
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# 根URL配置
ROOT_URLCONF = "VeggieVision.urls"

# 模板配置
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# WSGI应用
WSGI_APPLICATION = "VeggieVision.wsgi.application"

# 数据库配置（MySQL）
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "veggievision_db",       # 数据库名
        "USER": "root",                  # 数据库用户
        "PASSWORD": "20020217Zbf",       # 数据库密码
        "HOST": "localhost",             # 数据库主机
        "PORT": "3306",                  # 数据库端口
        "OPTIONS": {
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
            "charset": "utf8mb4"
        }
    }
}

# 用户模型配置
AUTH_USER_MODEL = "users.CustomUser"  # 自定义用户模型

# 国际化配置
LANGUAGE_CODE = "zh-hans"
TIME_ZONE = "Asia/Shanghai"  # 使用上海时区
USE_I18N = True
USE_TZ = True

# 静态文件与媒体文件配置
STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"  # 生产环境静态文件收集路径

# 媒体文件（图片存储）
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# 跨域资源共享（CORS）
CORS_ALLOW_ALL_ORIGINS = True           # 开发环境允许所有来源
CORS_ALLOW_CREDENTIALS = True           # 允许携带认证信息

# REST框架配置
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",  # Token认证
        # "rest_framework_simplejwt.authentication.JWTAuthentication",  # 如需JWT可取消注释
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        # 默认允许所有访问（具体权限在各视图中单独控制）
        "rest_framework.permissions.AllowAny"
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.MultiPartParser",  # 文件上传解析器
        "rest_framework.parsers.JSONParser"
    ]
}

# 模型路径配置
MODEL_PATHS = {
    "DETECTION_MODEL": BASE_DIR / "grading/models/pt/best.pt",   # YOLOv8模型路径
    "CLASS_NAMES": BASE_DIR / "grading/configs/classes.txt",    # 类别标签路径
    "ARGS_YAML": BASE_DIR / "grading/configs/args.yaml"         # 模型参数路径
}

# 设备配置（自动检测GPU/CPU）
DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
torch.set_num_threads(8)  # 设置PyTorch线程数（根据服务器核心数调整）

# 文件上传限制（5MB）
DATA_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # 5MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024

# 日志配置
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        }
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose"
        }
    },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG" if DEBUG else "INFO"
    }
}

